// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://neondb_owner:npg_E1keLas2TbCc@ep-black-heart-a8gnz1fj-pooler.eastus2.azure.neon.tech/neondb?sslmode=require"
}

model Domain {
  id        Int      @id @default(autoincrement())
  url       String   @unique
  context   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  crawlResults CrawlResult[]
  keywords     Keyword[]
  dashboardAnalysis DashboardAnalysis?
  competitorAnalyses CompetitorAnalysis[]
  suggestedCompetitors SuggestedCompetitor[]
  onboardingProgress OnboardingProgress?
}

model CrawlResult {
  id        Int      @id @default(autoincrement())
  domain    Domain   @relation(fields: [domainId], references: [id])
  domainId  Int
  pagesScanned Int
  contentBlocks Int
  keyEntities Int
  confidenceScore Float
  extractedContext String  @db.Text
  createdAt DateTime @default(now())
}

// New models for keywords
model Keyword {
  id           Int      @id @default(autoincrement())
  term         String
  volume       Int
  difficulty   String
  cpc          Float
  domainId     Int
  isSelected   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  domain       Domain   @relation(fields: [domainId], references: [id])
  phrases      Phrase[]

  @@unique([term, domainId])
  @@index([domainId])
}

model Phrase {
  id        Int      @id @default(autoincrement())
  text      String
  keyword   Keyword  @relation(fields: [keywordId], references: [id])
  keywordId Int
  aiQueryResults AIQueryResult[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AIQueryResult {
  id        Int      @id @default(autoincrement())
  phrase    Phrase   @relation(fields: [phraseId], references: [id])
  phraseId  Int
  model     String
  response  String   @db.Text
  latency   Float
  cost      Float
  presence  Int
  relevance Int
  accuracy  Int
  sentiment Int
  overall   Float
  createdAt DateTime @default(now())
}

// New models for storing AI analysis results
model DashboardAnalysis {
  id        Int      @id @default(autoincrement())
  domain    Domain   @relation(fields: [domainId], references: [id])
  domainId  Int      @unique
  metrics   Json     // Store all metrics as JSON
  insights  Json     // Store insights as JSON
  industryAnalysis Json // Store industry analysis as JSON
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([domainId])
}

model CompetitorAnalysis {
  id        Int      @id @default(autoincrement())
  domain    Domain   @relation(fields: [domainId], references: [id])
  domainId  Int
  competitors Json   // Store competitors array as JSON
  marketInsights Json // Store market insights as JSON
  strategicRecommendations Json // Store recommendations as JSON
  competitiveAnalysis Json // Store competitive analysis as JSON
  competitorList String @db.Text // Store the list of competitors analyzed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([domainId])
}

model SuggestedCompetitor {
  id        Int      @id @default(autoincrement())
  domain    Domain   @relation(fields: [domainId], references: [id])
  domainId  Int
  name      String
  competitorDomain String
  reason    String   @db.Text
  type      String   // 'direct' or 'indirect'
  createdAt DateTime @default(now())

  @@index([domainId])
}

// Onboarding Progress Tracking
model OnboardingProgress {
  id            Int      @id @default(autoincrement())
  domainId      Int      @unique
  domain        Domain   @relation(fields: [domainId], references: [id], onDelete: Cascade)
  currentStep   Int      @default(0) // 0-5 for the 6 steps
  isCompleted   Boolean  @default(false)
  stepData      Json?    // Store step-specific data
  lastActivity  DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([isCompleted])
  @@index([lastActivity])
}
